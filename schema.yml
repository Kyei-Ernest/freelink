openapi: 3.0.3
info:
  title: Freelink
  version: 1.0.0
  description: API for freelancers
paths:
  /api/chat/inbox/:
    get:
      operationId: api_chat_inbox_list
      description: API endpoint to list all messages received by the logged-in user.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/chat/message/{username}/:
    get:
      operationId: api_chat_message_list
      description: |-
        List all messages between the logged-in user and the given username.
        Marks as read if recipient is current viewer.
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/chat/send/:
    post:
      operationId: api_chat_send_create
      description: |-
        API endpoint to send a new message.
        The sender is always the current logged-in user.
        The recipient username is provided manually in the request.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/chat/sent/:
    get:
      operationId: api_chat_sent_list
      description: API endpoint to list all messages sent by the logged-in user.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/contracts/contracts/:
    get:
      operationId: api_contracts_contracts_list
      description: |-
        ViewSet for managing contracts.
        - create: Client creates a new contract.
        - list/retrieve: List or get details of contracts.
        - update: Update contract details.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contract'
          description: ''
    post:
      operationId: api_contracts_contracts_create
      description: |-
        ViewSet for managing contracts.
        - create: Client creates a new contract.
        - list/retrieve: List or get details of contracts.
        - update: Update contract details.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContractCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContractCreate'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractCreate'
          description: ''
  /api/contracts/contracts/{contract_id}/milestones/:
    get:
      operationId: api_contracts_contracts_milestones_list
      description: |-
        ViewSet for managing milestones within a contract.
        - create: Add a milestone to a contract (only if active).
        - list/retrieve: List or get details of milestones for a contract.
        - update/delete: Update or remove milestones.
      parameters:
      - in: path
        name: contract_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Milestone'
          description: ''
    post:
      operationId: api_contracts_contracts_milestones_create
      description: |-
        ViewSet for managing milestones within a contract.
        - create: Add a milestone to a contract (only if active).
        - list/retrieve: List or get details of milestones for a contract.
        - update/delete: Update or remove milestones.
      parameters:
      - in: path
        name: contract_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Milestone'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Milestone'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
          description: ''
  /api/contracts/contracts/{contract_id}/milestones/{id}/:
    get:
      operationId: api_contracts_contracts_milestones_retrieve
      description: |-
        ViewSet for managing milestones within a contract.
        - create: Add a milestone to a contract (only if active).
        - list/retrieve: List or get details of milestones for a contract.
        - update/delete: Update or remove milestones.
      parameters:
      - in: path
        name: contract_id
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this milestone.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
          description: ''
    put:
      operationId: api_contracts_contracts_milestones_update
      description: |-
        ViewSet for managing milestones within a contract.
        - create: Add a milestone to a contract (only if active).
        - list/retrieve: List or get details of milestones for a contract.
        - update/delete: Update or remove milestones.
      parameters:
      - in: path
        name: contract_id
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this milestone.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Milestone'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Milestone'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
          description: ''
    patch:
      operationId: api_contracts_contracts_milestones_partial_update
      description: |-
        ViewSet for managing milestones within a contract.
        - create: Add a milestone to a contract (only if active).
        - list/retrieve: List or get details of milestones for a contract.
        - update/delete: Update or remove milestones.
      parameters:
      - in: path
        name: contract_id
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this milestone.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMilestone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMilestone'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMilestone'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
          description: ''
    delete:
      operationId: api_contracts_contracts_milestones_destroy
      description: |-
        ViewSet for managing milestones within a contract.
        - create: Add a milestone to a contract (only if active).
        - list/retrieve: List or get details of milestones for a contract.
        - update/delete: Update or remove milestones.
      parameters:
      - in: path
        name: contract_id
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this milestone.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/contracts/contracts/{id}/:
    get:
      operationId: api_contracts_contracts_retrieve
      description: |-
        ViewSet for managing contracts.
        - create: Client creates a new contract.
        - list/retrieve: List or get details of contracts.
        - update: Update contract details.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this contract.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
          description: ''
    put:
      operationId: api_contracts_contracts_update
      description: |-
        ViewSet for managing contracts.
        - create: Client creates a new contract.
        - list/retrieve: List or get details of contracts.
        - update: Update contract details.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this contract.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contract'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contract'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contract'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
          description: ''
    patch:
      operationId: api_contracts_contracts_partial_update
      description: |-
        ViewSet for managing contracts.
        - create: Client creates a new contract.
        - list/retrieve: List or get details of contracts.
        - update: Update contract details.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this contract.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedContract'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedContract'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedContract'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
          description: ''
    delete:
      operationId: api_contracts_contracts_destroy
      description: |-
        ViewSet for managing contracts.
        - create: Client creates a new contract.
        - list/retrieve: List or get details of contracts.
        - update: Update contract details.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this contract.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/contracts/contracts/{id}/accept/:
    patch:
      operationId: api_contracts_contracts_accept_partial_update
      description: Freelancer accepts a contract that is in 'pending_acceptance' state.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/contracts/contracts/{id}/dispute/:
    patch:
      operationId: api_contracts_contracts_dispute_partial_update
      description: Either client or freelancer can raise a dispute on an active or
        in-review contract.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/contracts/contracts/{id}/mark-complete/:
    patch:
      operationId: api_contracts_contracts_mark_complete_partial_update
      description: Client marks a contract as completed (only when in 'in_review'
        state).
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/contracts/contracts/{id}/reject/:
    patch:
      operationId: api_contracts_contracts_reject_partial_update
      description: Freelancer rejects a contract that is in 'pending_acceptance' state.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/contracts/contracts/{id}/submit-work/:
    patch:
      operationId: api_contracts_contracts_submit_work_partial_update
      description: Freelancer submits work for a contract (moves it from 'active'
        → 'in_review').
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/contracts/contracts/user/{user_id}/:
    get:
      operationId: api_contracts_contracts_user_retrieve
      description: List all contracts for a given user (client or freelancer).
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/dashboard/:
    get:
      operationId: api_dashboard_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: ''
    post:
      operationId: api_dashboard_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dashboard'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Dashboard'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: ''
    put:
      operationId: api_dashboard_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dashboard'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Dashboard'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: ''
  /api/escrow/escrow/{transaction_id}/:
    get:
      operationId: api_escrow_escrow_retrieve
      parameters:
      - in: path
        name: transaction_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escrow'
          description: ''
  /api/jobs/:
    get:
      operationId: api_jobs_list
      description: |-
        API endpoint:
        - GET: List all jobs.
        - POST: Create a new job (only allowed for clients).
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobDetail'
          description: ''
    post:
      operationId: api_jobs_create
      description: |-
        API endpoint:
        - GET: List all jobs.
        - POST: Create a new job (only allowed for clients).
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
  /api/jobs/{id}/:
    get:
      operationId: api_jobs_retrieve
      description: |-
        API endpoint for retrieving, updating, or deleting a job.

        - GET: Retrieve a specific job by ID.
        - PUT/PATCH: Update a job (only the client who created it can update).
        - DELETE: Delete a job (only the client who created it can delete).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetail'
          description: ''
    put:
      operationId: api_jobs_update
      description: |-
        API endpoint for retrieving, updating, or deleting a job.

        - GET: Retrieve a specific job by ID.
        - PUT/PATCH: Update a job (only the client who created it can update).
        - DELETE: Delete a job (only the client who created it can delete).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Job'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    patch:
      operationId: api_jobs_partial_update
      description: |-
        API endpoint for retrieving, updating, or deleting a job.

        - GET: Retrieve a specific job by ID.
        - PUT/PATCH: Update a job (only the client who created it can update).
        - DELETE: Delete a job (only the client who created it can delete).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJob'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJob'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: ''
    delete:
      operationId: api_jobs_destroy
      description: |-
        API endpoint for retrieving, updating, or deleting a job.

        - GET: Retrieve a specific job by ID.
        - PUT/PATCH: Update a job (only the client who created it can update).
        - DELETE: Delete a job (only the client who created it can delete).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/jobs/{id}/status/:
    put:
      operationId: api_jobs_status_update
      description: |-
        API endpoint for updating the status of a job.
        Example: A client marking the job as 'completed' or 'cancelled'.

        - PATCH: Update only the status field.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JobStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JobStatus'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
          description: ''
    patch:
      operationId: api_jobs_status_partial_update
      description: |-
        API endpoint for updating the status of a job.
        Example: A client marking the job as 'completed' or 'cancelled'.

        - PATCH: Update only the status field.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJobStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJobStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJobStatus'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
          description: ''
  /api/jobs/skills/:
    get:
      operationId: api_jobs_skills_list
      description: |-
        API endpoint for admins to manage skills.
        - GET: List all skills
        - POST: Create a new skill
        - PUT/PATCH: Update an existing skill
        - DELETE: Remove a skill
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
          description: ''
    post:
      operationId: api_jobs_skills_create
      description: |-
        API endpoint for admins to manage skills.
        - GET: List all skills
        - POST: Create a new skill
        - PUT/PATCH: Update an existing skill
        - DELETE: Remove a skill
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Skill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
  /api/jobs/skills/{id}/:
    get:
      operationId: api_jobs_skills_retrieve
      description: |-
        API endpoint for admins to manage skills.
        - GET: List all skills
        - POST: Create a new skill
        - PUT/PATCH: Update an existing skill
        - DELETE: Remove a skill
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    put:
      operationId: api_jobs_skills_update
      description: |-
        API endpoint for admins to manage skills.
        - GET: List all skills
        - POST: Create a new skill
        - PUT/PATCH: Update an existing skill
        - DELETE: Remove a skill
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Skill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Skill'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    patch:
      operationId: api_jobs_skills_partial_update
      description: |-
        API endpoint for admins to manage skills.
        - GET: List all skills
        - POST: Create a new skill
        - PUT/PATCH: Update an existing skill
        - DELETE: Remove a skill
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSkill'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
          description: ''
    delete:
      operationId: api_jobs_skills_destroy
      description: |-
        API endpoint for admins to manage skills.
        - GET: List all skills
        - POST: Create a new skill
        - PUT/PATCH: Update an existing skill
        - DELETE: Remove a skill
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this skill.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/notifications/:
    get:
      operationId: api_notifications_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/profiles/{user__email}/:
    get:
      operationId: api_profiles_retrieve
      description: GET /profile/<username>/ → View a public profile
      parameters:
      - in: path
        name: user__email
        schema:
          type: string
          format: email
          title: Email Address
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
          description: ''
  /api/profiles/me/:
    get:
      operationId: api_profiles_me_retrieve
      description: GET /profile/me/ → View your own profile
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/profiles/me/update/:
    put:
      operationId: api_profiles_me_update_update
      description: PATCH /profile/me/update/ → Update your own profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdate'
          description: ''
    patch:
      operationId: api_profiles_me_update_partial_update
      description: PATCH /profile/me/update/ → Update your own profile
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdate'
          description: ''
  /api/proposals/:
    get:
      operationId: api_proposals_list
      description: |-
        - GET:
            * Freelancers → List their own proposals.
            * Clients → List proposals received for their jobs.
        - POST:
            * Freelancers submit a new proposal for a job.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal'
          description: ''
    post:
      operationId: api_proposals_create
      description: |-
        - GET:
            * Freelancers → List their own proposals.
            * Clients → List proposals received for their jobs.
        - POST:
            * Freelancers submit a new proposal for a job.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Proposal'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Proposal'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
          description: ''
  /api/proposals/{id}/:
    get:
      operationId: api_proposals_retrieve
      description: |-
        Retrieve a single proposal.
        Accessible by:
          - Freelancer who submitted it
          - Client who owns the job
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
          description: ''
  /api/proposals/{id}/status/:
    put:
      operationId: api_proposals_status_update
      description: |-
        Endpoint for clients to update a proposal's status.
        - Accept: Creates a Contract, marks job 'in_progress', declines others.
        - Decline: Simply marks proposal as declined.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProposalStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProposalStatus'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalStatus'
          description: ''
    patch:
      operationId: api_proposals_status_partial_update
      description: |-
        Endpoint for clients to update a proposal's status.
        - Accept: Creates a Contract, marks job 'in_progress', declines others.
        - Decline: Simply marks proposal as declined.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProposalStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProposalStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProposalStatus'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalStatus'
          description: ''
  /api/ratings/{user_id}/:
    get:
      operationId: api_ratings_list
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
          description: ''
    post:
      operationId: api_ratings_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rating'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
          description: ''
  /api/transactions/:
    get:
      operationId: api_transactions_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    post:
      operationId: api_transactions_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
  /api/transactions/{transaction_id}/status/:
    put:
      operationId: api_transactions_status_update
      parameters:
      - in: path
        name: transaction_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionStatus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionStatus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionStatus'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatus'
          description: ''
  /api/users/change-password/:
    put:
      operationId: api_users_change_password_update
      description: Change password for the authenticated user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
    patch:
      operationId: api_users_change_password_partial_update
      description: Change password for the authenticated user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChangePassword'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: Authenticate user and return auth token with user details.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/users/logout/:
    post:
      operationId: api_users_logout_create
      description: Log out user by deleting token and ending session.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/users/password-reset-request/:
    post:
      operationId: api_users_password_reset_request_create
      description: Request a password reset link by providing email address.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequest'
          description: ''
  /api/users/register/:
    post:
      operationId: api_users_register_create
      description: Register a new user account.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/users/reset-password/:
    post:
      operationId: api_users_reset_password_create
      description: Reset password for unauthenticated users using uid and token.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
          description: ''
  /api/users/verify-email/:
    post:
      operationId: api_users_verify_email_create
      description: Verify email address for a newly registered user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
          description: ''
  /api/wallet/wallet/:
    get:
      operationId: api_wallet_wallet_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: ''
    post:
      operationId: api_wallet_wallet_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wallet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Wallet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Wallet'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: ''
    put:
      operationId: api_wallet_wallet_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wallet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Wallet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Wallet'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: ''
components:
  schemas:
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - new_password
      - old_password
    Contract:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        job:
          allOf:
          - $ref: '#/components/schemas/Job'
          readOnly: true
        client:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        freelancer:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        contract_text:
          type: string
          nullable: true
        terms: {}
        agreed_bid:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        status:
          $ref: '#/components/schemas/ContractStatusEnum'
        escrow_status:
          $ref: '#/components/schemas/EscrowStatusEnum'
        escrow_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        start_date:
          type: string
          format: date-time
          readOnly: true
        end_date:
          type: string
          format: date-time
          nullable: true
        expiry_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'
          readOnly: true
        audit_trails:
          type: string
          readOnly: true
      required:
      - audit_trails
      - client
      - created_at
      - freelancer
      - id
      - job
      - milestones
      - start_date
      - updated_at
    ContractCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        job_id:
          type: integer
        freelancer_id:
          type: integer
        terms: {}
        agreed_bid:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'
      required:
      - freelancer_id
      - id
      - job_id
    ContractStatusEnum:
      enum:
      - pending_acceptance
      - active
      - completed
      - rejected
      - disputed
      type: string
      description: |-
        * `pending_acceptance` - Pending Acceptance
        * `active` - Active
        * `completed` - Completed
        * `rejected` - Rejected
        * `disputed` - Disputed
    CurrencyEnum:
      enum:
      - USD
      - EUR
      - GBP
      - GHS
      - NGN
      - KES
      type: string
      description: |-
        * `USD` - US Dollar
        * `EUR` - Euro
        * `GBP` - British Pound
        * `GHS` - Ghanaian Cedi
        * `NGN` - Nigerian Naira
        * `KES` - Kenyan Shilling
    Dashboard:
      type: object
      properties:
        preferences:
          description: 'User preferences for dashboard layout/widgets (e.g., {''widgets'':
            [''wallet'', ''transactions'']})'
        cached_metrics:
          description: 'Cached metrics (e.g., {''total_earnings'': 5000, ''pending_transactions'':
            2, ''unread_messages'': 1})'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - updated_at
    Escrow:
      type: object
      properties:
        transaction_id:
          type: integer
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          description: Amount held in escrow
        status:
          allOf:
          - $ref: '#/components/schemas/EscrowStatusEnum'
          description: |-
            Escrow status

            * `HELD` - Held
            * `RELEASED` - Released
            * `REFUNDED` - Refunded
            * `DISPUTED` - Disputed
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - transaction_id
      - updated_at
    EscrowStatusEnum:
      enum:
      - not_funded
      - funded
      - released
      - refunded
      type: string
      description: |-
        * `not_funded` - Not Funded
        * `funded` - Funded
        * `released` - Released
        * `refunded` - Refunded
    Job:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: Estimated duration in days
        deadline:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusB2eEnum'
      required:
      - budget
      - description
      - id
      - title
    JobDetail:
      type: object
      description: |-
        Detailed serializer for a single job.
        Can be extended to include proposals, client profile, freelancer profile, etc.
      properties:
        id:
          type: integer
          readOnly: true
        client:
          type: string
          readOnly: true
        freelancer:
          type: string
          readOnly: true
        skills_required:
          type: array
          items:
            type: string
        title:
          type: string
          maxLength: 200
        description:
          type: string
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: Estimated duration in days
        deadline:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusB2eEnum'
          readOnly: true
      required:
      - budget
      - client
      - created_at
      - description
      - freelancer
      - id
      - status
      - title
      - updated_at
    JobStatus:
      type: object
      description: |-
        Separate serializer for updating only the job status.
        Useful for endpoints like: /jobs/<id>/update-status/
      properties:
        status:
          $ref: '#/components/schemas/StatusB2eEnum'
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    Message:
      type: object
      description: Serializer for displaying and sending messages.
      properties:
        id:
          type: integer
          readOnly: true
        sender:
          type: string
          readOnly: true
        recipient:
          type: string
          description: Username of the recipient
        content:
          type: string
          description: Message content
          maxLength: 2000
        is_read:
          type: boolean
          readOnly: true
          description: Whether the recipient has read the message
        is_received:
          type: boolean
          readOnly: true
          description: Whether the message has been received by the server
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - is_read
      - is_received
      - recipient
      - sender
    Milestone:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        due_date:
          type: string
          format: date-time
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          $ref: '#/components/schemas/MilestoneStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - description
      - due_date
      - id
      - updated_at
    MilestoneStatusEnum:
      enum:
      - pending
      - in_progress
      - completed
      - disputed
      - released
      type: string
      description: |-
        * `pending` - Pending
        * `in_progress` - In Progress
        * `completed` - Completed
        * `disputed` - Disputed
        * `released` - Released
    Notification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        message:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        is_read:
          type: boolean
        user:
          type: integer
      required:
      - created_at
      - id
      - message
      - title
      - user
    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PatchedChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
    PatchedContract:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        job:
          allOf:
          - $ref: '#/components/schemas/Job'
          readOnly: true
        client:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        freelancer:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        contract_text:
          type: string
          nullable: true
        terms: {}
        agreed_bid:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        currency:
          $ref: '#/components/schemas/CurrencyEnum'
        status:
          $ref: '#/components/schemas/ContractStatusEnum'
        escrow_status:
          $ref: '#/components/schemas/EscrowStatusEnum'
        escrow_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        start_date:
          type: string
          format: date-time
          readOnly: true
        end_date:
          type: string
          format: date-time
          nullable: true
        expiry_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'
          readOnly: true
        audit_trails:
          type: string
          readOnly: true
    PatchedJob:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        client:
          type: string
          readOnly: true
        freelancer:
          type: string
          readOnly: true
        skills_required:
          type: array
          items:
            type: string
        title:
          type: string
          maxLength: 200
        description:
          type: string
        budget:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: Estimated duration in days
        deadline:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusB2eEnum'
          readOnly: true
    PatchedJobStatus:
      type: object
      description: |-
        Separate serializer for updating only the job status.
        Useful for endpoints like: /jobs/<id>/update-status/
      properties:
        status:
          $ref: '#/components/schemas/StatusB2eEnum'
    PatchedMilestone:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        due_date:
          type: string
          format: date-time
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          $ref: '#/components/schemas/MilestoneStatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedProfileUpdate:
      type: object
      properties:
        full_name:
          type: string
        phone:
          type: string
        language_preference:
          type: string
        bio:
          type: string
        skills: {}
        location:
          type: string
          maxLength: 255
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        profile_picture:
          type: string
          format: uri
          nullable: true
    PatchedProposalStatus:
      type: object
      description: |-
        Serializer for clients to update the proposal status
        (Accept or Decline).
      properties:
        status:
          $ref: '#/components/schemas/StatusFfeEnum'
    PatchedSkill:
      type: object
      description: Serializer for Skill model (used by admins).
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
    Profile:
      type: object
      properties:
        user_id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          title: Email Address
          readOnly: true
        full_name:
          type: string
          readOnly: true
        phone:
          type: string
          title: Phone Number
          readOnly: true
        language_preference:
          type: string
          readOnly: true
        is_freelancer:
          type: boolean
          readOnly: true
        is_client:
          type: boolean
          readOnly: true
        bio:
          type: string
          readOnly: true
        skills:
          readOnly: true
        location:
          type: string
          readOnly: true
        website:
          type: string
          format: uri
          readOnly: true
          nullable: true
        profile_picture:
          type: string
          format: uri
          readOnly: true
          nullable: true
        is_verified:
          type: boolean
          readOnly: true
        is_phone_verified:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - bio
      - created_at
      - email
      - full_name
      - is_client
      - is_freelancer
      - is_phone_verified
      - is_verified
      - language_preference
      - location
      - phone
      - profile_picture
      - skills
      - updated_at
      - user_id
      - username
      - website
    ProfileUpdate:
      type: object
      properties:
        full_name:
          type: string
        phone:
          type: string
        language_preference:
          type: string
        bio:
          type: string
        skills: {}
        location:
          type: string
          maxLength: 255
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        profile_picture:
          type: string
          format: uri
          nullable: true
    Proposal:
      type: object
      description: |-
        Serializer for freelancers to submit proposals
        and for clients to view them.
      properties:
        id:
          type: integer
          readOnly: true
        freelancer:
          type: string
          readOnly: true
        job:
          type: integer
        job_title:
          type: string
          readOnly: true
        cover_letter:
          type: string
        bid:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_time:
          type: string
          maxLength: 100
        status:
          allOf:
          - $ref: '#/components/schemas/StatusFfeEnum'
          readOnly: true
        submitted_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - bid
      - cover_letter
      - estimated_time
      - freelancer
      - id
      - job
      - job_title
      - status
      - submitted_at
    ProposalStatus:
      type: object
      description: |-
        Serializer for clients to update the proposal status
        (Accept or Decline).
      properties:
        status:
          $ref: '#/components/schemas/StatusFfeEnum'
    PublicProfile:
      type: object
      properties:
        username:
          type: string
          readOnly: true
        full_name:
          type: string
          readOnly: true
        bio:
          type: string
        skills: {}
        location:
          type: string
          maxLength: 255
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        profile_picture:
          type: string
          format: uri
          nullable: true
      required:
      - full_name
      - username
    Rating:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        rating:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        comment:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        job:
          type: integer
        reviewer:
          type: integer
          readOnly: true
        reviewee:
          type: integer
      required:
      - created_at
      - id
      - job
      - rating
      - reviewee
      - reviewer
    Register:
      type: object
      properties:
        full_name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          title: Email Address
          maxLength: 254
        phone:
          type: string
          title: Phone Number
          maxLength: 20
        password:
          type: string
          writeOnly: true
          maxLength: 128
        password_confirm:
          type: string
          writeOnly: true
        is_freelancer:
          type: boolean
        is_client:
          type: boolean
      required:
      - email
      - full_name
      - password
      - password_confirm
      - phone
    ResetPassword:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
        uidb64:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        confirm_new_password:
          type: string
          writeOnly: true
      required:
      - confirm_new_password
      - new_password
      - token
      - uidb64
    Skill:
      type: object
      description: Serializer for Skill model (used by admins).
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - id
      - name
    Status911Enum:
      enum:
      - PENDING
      - COMPLETED
      - FAILED
      - REFUNDED
      type: string
      description: |-
        * `PENDING` - Pending
        * `COMPLETED` - Completed
        * `FAILED` - Failed
        * `REFUNDED` - Refunded
    StatusB2eEnum:
      enum:
      - available
      - pending
      - in_progress
      - completed
      - cancelled
      type: string
      description: |-
        * `available` - Available
        * `pending` - Pending
        * `in_progress` - In Progress
        * `completed` - Completed
        * `cancelled` - Cancelled
    StatusFfeEnum:
      enum:
      - submitted
      - declined
      - accepted
      type: string
      description: |-
        * `submitted` - Submitted
        * `declined` - Declined
        * `accepted` - Accepted
    Transaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        client:
          type: integer
          readOnly: true
          description: The client making the payment
        freelancer:
          type: integer
          description: The freelancer receiving the payment
        client_username:
          type: string
          readOnly: true
        freelancer_username:
          type: string
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Transaction amount in USD
        description:
          type: string
          description: Description of the transaction (e.g., project details)
          maxLength: 500
        status:
          allOf:
          - $ref: '#/components/schemas/Status911Enum'
          readOnly: true
          description: |-
            Transaction status

            * `PENDING` - Pending
            * `COMPLETED` - Completed
            * `FAILED` - Failed
            * `REFUNDED` - Refunded
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - client
      - client_username
      - created_at
      - freelancer
      - freelancer_username
      - id
      - status
      - updated_at
    TransactionStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/Status911Enum'
          description: |-
            Transaction status

            * `PENDING` - Pending
            * `COMPLETED` - Completed
            * `FAILED` - Failed
            * `REFUNDED` - Refunded
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        full_name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          title: Email Address
          maxLength: 254
      required:
      - email
      - full_name
      - id
    VerifyEmail:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
        uidb64:
          type: string
          writeOnly: true
      required:
      - token
      - uidb64
    Wallet:
      type: object
      properties:
        balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Current balance in USD
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - updated_at
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
